<?php

namespace AppBundle\Entity;

/**
 * CoachingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoachingRepository extends \Doctrine\ORM\EntityRepository
{
	public function findRelevantToUser($user) {
		$qb = $this->getEntityManager()->createQueryBuilder();
		// If it is a Doctor and a Hospital is defined
		if ($user->getUserGroup()->getId() === 4 && is_null($user->getHospital()) === FALSE) {			
		    $qb
		        ->select('c', 'p')
		        ->from('AppBundle:Coaching', 'c')
		        ->leftJoin('c.patient', 'p')
		        ->where('p.hospital = :id')
		        ->setParameter('id', $user->getHospital()->getId())
		        ->orderBy('c.id', 'DESC');
		// If it is a Coach
		} else if ($user->getUserGroup()->getId() === 5) {			
		    $qb
		        ->select('c')
		        ->from('AppBundle:Coaching', 'c')
		        ->where('c.sysUser = :id')
		        ->setParameter('id', $user->getId())
		        ->orderBy('c.id', 'DESC');
		} else {
			$qb
		        ->select('c')
		        ->from('AppBundle:Coaching', 'c')
		        ->orderBy('c.id', 'DESC');
		}		

	    try {
	    	return $qb->getQuery()->getResult();			
		} catch (\Doctrine\ORM\NoResultException $e) { return null; } 
	}

	public function findIdsRelevantToUser($user) {
		$qb = $this->getEntityManager()->createQueryBuilder();
		// If it is a Doctor and a Hospital is defined
		if ($user->getUserGroup()->getId() === 4 && is_null($user->getHospital()) === FALSE) {			
		    $qb
		        ->select('c.id')
		        ->from('AppBundle:Coaching', 'c')
		        ->leftJoin('c.patient', 'p')
		        ->where('p.hospital = :id')
		        ->setParameter('id', $user->getHospital()->getId())
		        ->orderBy('c.id', 'DESC');
		// If it is a Coach
		} else if ($user->getUserGroup()->getId() === 5) {			
		    $qb
		        ->select('c.id')
		        ->from('AppBundle:Coaching', 'c')
		        ->where('c.patient = :id')
		        ->setParameter('id', $user->getId())
		        ->orderBy('c.id', 'DESC');
		} else {
			$qb
		        ->select('c.id')
		        ->from('AppBundle:Coaching', 'c')
		        ->orderBy('c.id', 'DESC');
		}		

	    try {
	    	return $qb->getQuery()->getResult();			
		} catch (\Doctrine\ORM\NoResultException $e) { return null; } 
	}

	public function getForGraph($id) {
		$qb = $this->getEntityManager()->createQueryBuilder();
	    $qb
	        ->select(
	        	'c.weight', 
	        	'c.mondayThisWeek', 	        	
	        	'sum(c.weight) AS sum_weight', 
	        	'count(c.weight) AS sum_people',
	        	'sum(c.weight) / count(c.weight) AS mean'	        	
	        )
	        ->addSelect('(SELECT coaching.weight
                FROM AppBundle:Coaching coaching
                LEFT OUTER JOIN coaching.patient pat
                WHERE pat.id = :id AND coaching.mondayThisWeek = c.mondayThisWeek
                ) AS patient_weight'
   			)
	        ->from('AppBundle:Coaching', 'c')
	        ->setParameter('id', $id)
	        ->groupBy('c.mondayThisWeek')
	        ->orderBy('c.mondayThisWeek', 'ASC');	        		

	    try {
	    	return $qb->getQuery()->getArrayResult();			
		} catch (\Doctrine\ORM\NoResultException $e) { return null; } 
	}
}
